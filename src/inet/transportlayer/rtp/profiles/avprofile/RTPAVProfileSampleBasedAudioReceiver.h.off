//
// SPDX-License-Identifier: GPL-2.0-or-later
//
// This program is free software; you can redistribute it and/or
// modify it under the terms of the GNU General Public License
// as published by the Free Software Foundation; either version 2
// of the License, or (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
//
/***************************************************************************
                          RTPAVProfileSampleBasedAudioReceiver.h  -  description
                             -------------------
    begin                : Fri Sep 13 2002
    copyright            : (C) 2002 by Matthias Oppitz
    email                : matthias.oppitz@gmx.de
 ***************************************************************************/

/** \file RTPAVProfileSampleBasedAudioReceiver.h
 *
 */

#ifndef __RTPAVPROFILESAMPLEBASEDAUDIORECEIVER_H__
#define __RTPAVPROFILESAMPLEBASEDAUDIORECEIVER_H__

#include <audiofile.h>
#include <omnetpp.h>
#include "RTPPayloadReceiver.h"


/**
 *
 */
class INET_API RTPAVProfileSampleBasedAudioReceiver : public RTPPayloadReceiver
{
    public:
        RTPAVProfileSampleBasedAudioReceiver() : RTPPayloadReceiver() {}
        virtual ~RTPAVProfileSampleBasedAudioReceiver();

    protected:
        AFfilehandle _audioFile;
        AFfilesetup _fileSetup;
        int _samplingRate, _sampleWidth, _numberOfChannels;

        virtual void processPacket(RTPPacket *packet);

        virtual void openOutputFile(const char *fileName);
        virtual void closeOutputFile();

        /**
         * When packets arrival late or have been lost, this method can be called to
         * insert a silence period. It must be overwritten because in different audio
         * formats different values for silence exist.
         */
        virtual void insertSilence(simtime_t duration);

};

#endif