%description:
Test MemoryOutputStream

%includes:
#include "inet/common/MemoryOutputStream.h"
#include <iomanip>

static std::ostream& operator<<(std::ostream& os, const ::inet::MemoryOutputStream& stream)
{
    const std::vector<uint8_t>& data = stream.getData();
    const char *sep = "";
    for (auto b: data) {
        os << sep << std::hex << std::setw(2) << std::setfill('0') << (unsigned int)b;
        sep = " ";
    }
    os << std::dec;
    return os;
}

%global:

#define Bit(x) s.writeBit(x)
#define BitR(x, y) s.writeBitRepeatedly(x, y)
#define Byte(x) s.writeByte(x)
#define ByteR(x, y) s.writeByteRepeatedly(x, y)
#define TEST(x, y, z) { inet::MemoryOutputStream s; x; EV << "    TEST(" << #x << ", " << #y << ", " << s << ");\n"; }
//

%activity:
    EV << "Start:\n";

    // INFO: use indent 4, use one space between parameters, and copy TEST lines to 'contains'

    TEST(Bit(1);Bit(0);Bit(0);Bit(0);Bit(0);Bit(0);Bit(1);Bit(0), 1 0 0 0 0 0 1 0, 82);
    TEST(Bit(0);Byte(0xff);BitR(0,7), 0 1111.1111 0000.000: 0111 1111 1000 0000, 7f 80);
    TEST(Bit(1);Byte(0x00);BitR(1,7), 1 0000.0000 1111.111: 1000 0000 0111 1111, 80 7f);
    TEST(Bit(1);Byte(0xff);BitR(1,7), 1 1111.1111 1111.111: 1111 1111 1111 1111, ff ff);
    TEST(Bit(0);Byte(0x82);BitR(0,7), 0 1000.0010 0000.000: 0100 0001 0000 0000, 41 00);
    TEST(Bit(1);Byte(0x82);BitR(1,7), 1 1000.0010 1111.111: 1100 0001 0111 1111, c1 7f);
    TEST(BitR(0,5);Byte(0x82);BitR(0,3), 0000.0 1000.0010 000: 0000 0100 0001 0000, 04 10);
    TEST(BitR(1,5);Byte(0x82);BitR(1,3), 1111.1 1000.0010 111: 1111 1100 0001 0111, fc 17);
    TEST(BitR(0,3);Byte(0x82);BitR(0,5), 000 1000.0010 0000.0: 0001 0000 0100 0000, 10 40);
    TEST(BitR(1,3);Byte(0x82);BitR(1,5), 111 1000.0010 1111.1: 1111 0000 0101 1111, f0 5f);
    TEST(BitR(0,7);Byte(0x82);Bit(0), 0000.000 1000.0010 0: 0000 0001 0000 0100, 01 04);
    TEST(BitR(1,7);Byte(0x82);Bit(1), 1111.111 1000.0010 1: 1111 1111 0000 0101, ff 05);
    TEST(Bit(0);ByteR(0xff,3);BitR(0,7), 0 1111.1111 1111.1111 1111.1111 0000.000: 0111 1111 1111 1111 1111 1111 1000 0000, 7f ff ff 80);
    TEST(Bit(1);ByteR(0x00,3);BitR(1,7), 1 0000.0000 0000.0000 0000.0000 1111.111: 1000 0000 0000 0000 0000 0000 0111 1111, 80 00 00 7f);
    TEST(Bit(1);ByteR(0xff,3);BitR(1,7), 1 1111.1111 1111.1111 1111.1111 1111.111: 1111 1111 1111 1111 1111 1111 1111 1111, ff ff ff ff);
    TEST(Bit(0);ByteR(0x82,3);BitR(0,7), 0 1000.0010 1000.0010 1000.0010 0000.000: 0100 0001 0100 0001 0100 0001 0000 0000, 41 41 41 00);
    TEST(Bit(1);ByteR(0x82,3);BitR(1,7), 1 1000.0010 1000.0010 1000.0010 1111.111: 1100 0001 0100 0001 0100 0001 0111 1111, c1 41 41 7f);
    TEST(BitR(0,5);ByteR(0x82,3);BitR(0,3), 0000.0 1000.0010 1000.0010 1000.0010 000: 0000 0100 0001 0100 0001 0100 0001 0000, 04 14 14 10);
    TEST(BitR(1,5);ByteR(0x82,3);BitR(1,3), 1111.1 1000.0010 1000.0010 1000.0010 111: 1111 1100 0001 0100 0001 0100 0001 0111, fc 14 14 17);
    TEST(BitR(0,3);ByteR(0x82,3);BitR(0,5), 000 1000.0010 1000.0010 1000.0010 0000.0: 0001 0000 0101 0000 0101 0000 0100 0000, 10 50 50 40);
    TEST(BitR(1,3);ByteR(0x82,3);BitR(1,5), 111 1000.0010 1000.0010 1000.0010 1111.1: 1111 0000 0101 0000 0101 0000 0101 1111, f0 50 50 5f);
    TEST(BitR(0,7);ByteR(0x82,3);Bit(0), 0000.000 1000.0010 1000.0010 1000.0010 0: 0000 0001 0000 0101 0000 0101 0000 0100, 01 05 05 04);
    TEST(BitR(1,7);ByteR(0x82,3);Bit(1), 1111.111 1000.0010 1000.0010 1000.0010 1: 1111 1111 0000 0101 0000 0101 0000 0101, ff 05 05 05);

    EV << ".\n";

%contains: stdout
Start:
    TEST(Bit(1);Bit(0);Bit(0);Bit(0);Bit(0);Bit(0);Bit(1);Bit(0), 1 0 0 0 0 0 1 0, 82);
    TEST(Bit(0);Byte(0xff);BitR(0,7), 0 1111.1111 0000.000: 0111 1111 1000 0000, 7f 80);
    TEST(Bit(1);Byte(0x00);BitR(1,7), 1 0000.0000 1111.111: 1000 0000 0111 1111, 80 7f);
    TEST(Bit(1);Byte(0xff);BitR(1,7), 1 1111.1111 1111.111: 1111 1111 1111 1111, ff ff);
    TEST(Bit(0);Byte(0x82);BitR(0,7), 0 1000.0010 0000.000: 0100 0001 0000 0000, 41 00);
    TEST(Bit(1);Byte(0x82);BitR(1,7), 1 1000.0010 1111.111: 1100 0001 0111 1111, c1 7f);
    TEST(BitR(0,5);Byte(0x82);BitR(0,3), 0000.0 1000.0010 000: 0000 0100 0001 0000, 04 10);
    TEST(BitR(1,5);Byte(0x82);BitR(1,3), 1111.1 1000.0010 111: 1111 1100 0001 0111, fc 17);
    TEST(BitR(0,3);Byte(0x82);BitR(0,5), 000 1000.0010 0000.0: 0001 0000 0100 0000, 10 40);
    TEST(BitR(1,3);Byte(0x82);BitR(1,5), 111 1000.0010 1111.1: 1111 0000 0101 1111, f0 5f);
    TEST(BitR(0,7);Byte(0x82);Bit(0), 0000.000 1000.0010 0: 0000 0001 0000 0100, 01 04);
    TEST(BitR(1,7);Byte(0x82);Bit(1), 1111.111 1000.0010 1: 1111 1111 0000 0101, ff 05);
    TEST(Bit(0);ByteR(0xff,3);BitR(0,7), 0 1111.1111 1111.1111 1111.1111 0000.000: 0111 1111 1111 1111 1111 1111 1000 0000, 7f ff ff 80);
    TEST(Bit(1);ByteR(0x00,3);BitR(1,7), 1 0000.0000 0000.0000 0000.0000 1111.111: 1000 0000 0000 0000 0000 0000 0111 1111, 80 00 00 7f);
    TEST(Bit(1);ByteR(0xff,3);BitR(1,7), 1 1111.1111 1111.1111 1111.1111 1111.111: 1111 1111 1111 1111 1111 1111 1111 1111, ff ff ff ff);
    TEST(Bit(0);ByteR(0x82,3);BitR(0,7), 0 1000.0010 1000.0010 1000.0010 0000.000: 0100 0001 0100 0001 0100 0001 0000 0000, 41 41 41 00);
    TEST(Bit(1);ByteR(0x82,3);BitR(1,7), 1 1000.0010 1000.0010 1000.0010 1111.111: 1100 0001 0100 0001 0100 0001 0111 1111, c1 41 41 7f);
    TEST(BitR(0,5);ByteR(0x82,3);BitR(0,3), 0000.0 1000.0010 1000.0010 1000.0010 000: 0000 0100 0001 0100 0001 0100 0001 0000, 04 14 14 10);
    TEST(BitR(1,5);ByteR(0x82,3);BitR(1,3), 1111.1 1000.0010 1000.0010 1000.0010 111: 1111 1100 0001 0100 0001 0100 0001 0111, fc 14 14 17);
    TEST(BitR(0,3);ByteR(0x82,3);BitR(0,5), 000 1000.0010 1000.0010 1000.0010 0000.0: 0001 0000 0101 0000 0101 0000 0100 0000, 10 50 50 40);
    TEST(BitR(1,3);ByteR(0x82,3);BitR(1,5), 111 1000.0010 1000.0010 1000.0010 1111.1: 1111 0000 0101 0000 0101 0000 0101 1111, f0 50 50 5f);
    TEST(BitR(0,7);ByteR(0x82,3);Bit(0), 0000.000 1000.0010 1000.0010 1000.0010 0: 0000 0001 0000 0101 0000 0101 0000 0100, 01 05 05 04);
    TEST(BitR(1,7);ByteR(0x82,3);Bit(1), 1111.111 1000.0010 1000.0010 1000.0010 1: 1111 1111 0000 0101 0000 0101 0000 0101, ff 05 05 05);
.
